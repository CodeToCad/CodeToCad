[
    {
        "name": "Analytics",
        "description": "From measuring distances and dimensions of objects, to logging, the Analytics class has the operations you need.",
        "codeFilepath": "analytics/analytics.py",
        "imagePath": ""
    },
    {
        "name": "Materials",
        "description": "Apply a material to Parts by creating a Material, and then assigning it to a Part.",
        "codeFilepath": "animation_and_rendering/materials.py",
        "imagePath": "animation_and_rendering/material_cube.png"
    },
    {
        "name": "Preset Materials",
        "description": "CodeToCAD defines some preset materials for your convinence, see <a href='https://github.com/CodeToCAD/CodeToCAD/blob/develop/codetocad/enums/preset_material.py'>preset_materials.py</a> for more information",
        "codeFilepath": "animation_and_rendering/preset_materials.py",
        "imagePath": ""
    },
    {
        "name": "Lights!Camera!Action!",
        "description": "Create lights and add cameras to your scene!",
        "codeFilepath": "animation_and_rendering/lights!camera!actions!.py",
        "imagePath": "animation_and_rendering/lights!camera!actions!.png"
    },
    {
        "name": "Scene Backgrounds (HDR or images)",
        "description": "Add HDR and backgrounds to your rendered or animated scene.",
        "codeFilepath": "animation_and_rendering/hdr_background_tester.py",
        "imagePath": "animation_and_rendering/hdr_background_tester.png"
    },
    {
        "name": "Bracelet",
        "description": "You can use the boolean modifiers Subtract, Union and Intersect to manipulate parts, as shown in this 3D Printable bracelet.",
        "codeFilepath": "bracelet/bracelet.py",
        "imagePath": ""
    },
    {
        "name": "D-Shaft",
        "description": "A D-keyed shaft using Landmarks and the Subtract modifier.",
        "codeFilepath": "couplings/d_shaft.py",
        "imagePath": ""
    },
    {
        "name": "D-Shaft Knob",
        "description": "You can import another CodeToCAD model, and uses the Union modifier to create new shapes.",
        "codeFilepath": "couplings/d_shaft_knob.py",
        "imagePath": ""
    },
    {
        "name": "Simple Cube",
        "description": "The easiest CodeToCAD example.",
        "codeFilepath": "cubes/simple_cube.py",
        "imagePath": ""
    },
    {
        "name": "Calibration Cube",
        "description": "Calibration Cubes use Landmarks on both the Texts' Sketches and the Cube to define where the Text is positioned on the Cube. ",
        "codeFilepath": "cubes/calibration_cube.py",
        "imagePath": "cubes/calibration_cube.png"
    },
    {
        "name": "Stackable Furniture Legs",
        "description": "3D Printable furniture legs that grow as you stack them.",
        "codeFilepath": "furniture/stackable_furniture_legs.py",
        "imagePath": ""
    },
    {
        "name": "Import and Export",
        "description": "You can import files by using the create_from_file() method, and export Entities using the export() method. The filename extension will be used to guess the filetype, but you can specify a filetype too.",
        "codeFilepath": "importexport/import_export.py",
        "imagePath": ""
    },
    {
        "name": "Ball Joint",
        "description": "Parts can be mated/jointed using Landmarks and Joints.",
        "codeFilepath": "joints_and_constraints/ball_joint.py",
        "imagePath": ""
    },
    {
        "name": "Universal Joint",
        "description": "Parts can be mated/jointed using Landmarks and Joints.",
        "codeFilepath": "joints_and_constraints/universal_joint.py",
        "imagePath": "joints_and_constraints/universal_joint.png"
    },
    {
        "name": "Double Universal Joint",
        "description": "Parts can be mated/jointed using Landmarks and Joints.",
        "codeFilepath": "joints_and_constraints/universal_joint_double.py",
        "imagePath": "joints_and_constraints/universal_joint_double.png"
    },
    {
        "name": "Gear",
        "description": "A simple gear constraint",
        "codeFilepath": "joints_and_constraints/gear_constraint.py",
        "imagePath": ""
    },
    {
        "name": "Landmarking",
        "description": "An important feature in CodeToCAD, allowing you to quickly reference locations in a geometry, for example, PresetLandmark.top will find the top-most face of a part.",
        "codeFilepath": "landmarking/landmark_relative.py",
        "imagePath": ""
    },
    {
        "name": "OpenCascade Bottle",
        "description": "The famous OCC Bottle.",
        "codeFilepath": "open_cascade_bottle/open_cascade_bottle.py",
        "imagePath": ""
    },
    {
        "name": "Fillets and Chamfers",
        "description": "You can apply fillets and chamfers to specific edges or faces, or to all the edges or faces. To target a specific edge or face, create a Landmark near the target.",
        "codeFilepath": "operations/fillets_and_chamfers.py",
        "imagePath": "operations/fillets_and_chamfers.png"
    },
    {
        "name": "Patterns",
        "description": "Use linear and circular patterns to create more of a Part or a Sketch. Note: the Hole method also allows you to pattern holes.",
        "codeFilepath": "operations/patterning.py",
        "imagePath": ""
    },
    {
        "name": "Boolean operations",
        "description": "Basic CSG operations like Union, Intersect and Subtract can be used here.",
        "codeFilepath": "operations/union.py",
        "imagePath": ""
    },
    {
        "name": "Simple Humanoid",
        "description": "A simple person",
        "codeFilepath": "simple_humanoid/simple_humanoid.py",
        "imagePath": "simple_humanoid/simple_humanoid.png"
    },
    {
        "name": "2D Sketching",
        "description": "You can construct geometry using 2D sketching on planes or faces. You can also use extruding functions like extrude, loft, sweep and twist. You may also utilize the power of Landmarks at any time to quickly reference parts of a sketch. Sketches are made up of Wires, Edges and Vertices.",
        "codeFilepath": "sketching/sketching.py",
        "imagePath": ""
    },
    {
        "name": "Extruding",
        "description": "2D Sketches can be extruded into 3D shapes.",
        "codeFilepath": "sketching/extruding.py",
        "imagePath": "sketching/extruding.png"
    },
    {
        "name": "Donuts",
        "description": "The famous revolve extrude.",
        "codeFilepath": "sketching/revolve_extrude.py",
        "imagePath": ""
    },
    {
        "name": "Sweeping coil",
        "description": "Apply a sweep modifier to a Sketch to make it follow a profile path, to create a new Part. Note: make sure to sweep the profile, for example `myProfile.sweep('mySketch')`; see `grooveSpiral.sweep(groove)` below.",
        "codeFilepath": "sketching/coil.py",
        "imagePath": "sketching/coil.png"
    },
    {
        "name": "Profile Pipe",
        "description": "Sweeping a sketch is totally doable.",
        "codeFilepath": "sketching/profile_pipe.py",
        "imagePath": "sketching/profile_pipe.png"
    },
    {
        "name": "Text",
        "description": "Use Sketch.create_text() to write text. You can apply different text fonts, decorations and sizes. You can also extrude text, or define landmarks relative to the Sketch to mate/joint text to other landmarks.",
        "codeFilepath": "text/text.py",
        "imagePath": "text/text.png"
    },
    {
        "name": "Advanced Text",
        "description": "Text with forloops and joints.",
        "codeFilepath": "text/text_alphabets.py",
        "imagePath": "text/text_alphabets.png"
    }
]